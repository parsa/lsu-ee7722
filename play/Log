:: 21 January 2008, 19:08:38 CST

Optimizing cube 4.

Initial, 100  per face.
5.2 us

Call use program lazily.
3.1 us

Only upload some uniforms once per face.
2.7 us

Application not optimized.
2.8 us

Immediate return from circle
0.5 us

Return just before glBegin
0.5 us

Use fixed circle:
2.2 us
2.5 ms

Only upload some uniforms once per face. (Repeat, but with cpu)
2.8 us
3.1 ms

Only upload some uniforms once per face. Get cpu time before gpu query.
2.8 us
2.8 ms

Use fixed circle.
2.2 us
2.2 ms

Only update texture center once per frame (it will be incorrect).
2.8 us
2.7 ms

No uniforms.
2.1 us
2.0 ms

Immediate Return
0.5
0.8

Return just before begin/end
0.5
0.8

Execute begin/end without vertices.
1.3
1.6

Use DrawArrays, no uniforms
1.9
1.8

Use DrawArrays, uniforms for tex ctr, circle center
2.7
2.6

Make circle center and tex_ctr an attribute.
1.9
1.8

Use draw arrays for fixed circle.
1.9
1.8

Bumps, x 20

Original Code (vertex3)
8.4
8.5

Using Arrays ??? (vertex4)
9.1
9.4

Using arrays, omitting normals. (vertex3)
8.2
8.7

:: 23 January 2008, 19:11:45 CST

Repeat timing experiments after using texgen and using
a face-forward transformation.

Fixed function circle (x100)
1.8 us GPU
1.6 ms CPU

With shader
2.0
1.9

Bumps, x20

Fixed function (circle & bump)  No normals.
5.1
5.6

:: 24 January 2008,  9:48:13 CST

Fixed a few random things.
Lighting shader used when bump computed by CPU.
Bumps, x20

CPU Bumps
5.3 us
5.6 ms

GPU Bumps
3.1 us
3.2 ms

Include normal calculations. CPU does it per vertex, CPU per quad.

CPU Bumps:
3.7
3.8

GPU Bumps
3.2
3.3

Use just one attribute array.

GPU Bumps
3.0
3.1

With 30 radial steps.  GPU
7.1
7.2

GPU don't send unchanging attributes as array. 
4.6
4.7

Fixed
9.8
9.8

GPU, don't even update pinnacle array in loop.
3.9
4.1

GPU, Just send theta and eta in vertex.
2.4
2.5

GPU, only update array once, but keep sending to gpu
2.3
2.1

GPU, use buffer object for vertices.
1.2
1.1

GPU, immediate return from bump render.
0.6
0.9

CPU, return after preparing data, but without graphics calls.
0.6
7.0

::  2 February 2008, 19:48:36 CST

g_prv.velocity
g_prv.position
g_prv.force

g.velocity (estimated)
g.position Computed using estimated velocity?
g.force = blah blah

g.velocity = g_prv.velocity + 



g_next.position = g.velocity * delta_t..


g_nxt

:: 25 February 2008, 17:42:31 CST

Cube5 To Do:

GPU / CPU Time.

Send vertex info in bunches.

::  2 March 2008, 12:03:18 CST
::  3 March 2008,  8:18:51 CST


Cube 5 Tuning.

All timings below for gpu use.

CPU 3.65 ms

Use buffer object for texture coordinates.

CPU 3.65

Don't update color and normal arrays (but still use).
CPU 3.0

Don't update color and normal arrays and don't use either.
CPU 2.9

Don't update color and normal arrays and don't use either. 
Send 1/2 of the triangles.
CPU 2.85

Don't update color and normal arrays and don't use either. 
Send 1/2 of the triangles.
Only render 1/2 faces.
CPU 2.65

Render 0 faces.
CPU: 2.55

Render 0 faces.
Paused
CPU: .67

Render all faces, all triangles, but still no color or normal.
Paused:
CPU: 1.0

Render all faces, all triangles, but still no color or normal.
CPU: 3.0

Render everything again, but still don't update colors and normals.
CPU: 3.05
Paused:
CPU: 1.1
-> Physics = 1.95

Without GPU Physics
CPU: 4.8
Paused:
CPU: 1.1
-> Physics = 3.7

Note: Per time steps below omits constant overhead. (t1-t2)/(n1-n2)

Render everything again, including normals and colors.
Baseline: 5 ts / frame
CPU: 3.7 ms
GPU: 3.9 us

Doubled to 600 time steps / s
CPU: 4.3
GPU: 4.6
Per time step, cpu: 0.12 ms / ts
Per time step, gpu: 0.14 us / ts

To 1200 time steps / s
CPU: 5.7
CPU: 6.1
Per time step: 0.133 / ts
Per time step, gpu: 0.147 us / ts

Paused:
CPU: 1.7
GPU: 1.1


Use vertex shader for normals and colors, just use buffer objects
but still shuttle data between GPU and CPU each frame.
CPU: 2.7
GPU: 2.9

At 600 ts / s
CPU: 3.4
GPU: 3.6
Per time step, cpu: 0.14 / ts

At 1200 ts / s
CPU: 5.0
GPU: 5.0

Per time step, cpu: 0.153 / ts

Just transfer current buffer from gpu to cpu for each frame.
CPU: 2.3
GPU: 2.4

Don't transfer buffer unless data is needed at destination.
CPU: 1.6
GPU: 1.7

Grid size 30 -> 60
CPU: 2.6
GPU: 2.7

:: 28 September 2009, 12:03:03 CDT

Bouncing ball demo to do:

Take into account delta_t when applying friction.

In ball collision, check for angular and linear momentum conservation.
For ball penetration account for exact time balls intersect.
Find a better model for collision energy loss. 
>Account for torque in ball penetration.
>Use penetration's collision model in platform collision code.

Combine rotation axis and rate.

Pre-compute factors.

Determine relative cost of display and physics.

CUDA

CPU

1.60 Use ball penetration for platform coll.
2.38 Alternate handling of rolling friction. Temporary validation code?
2.30 Remove test of apply deltao.
1.64 Remove to/from am in penetration routine.
1.56 Only use to/from to compute the rotation vector.
1.52 No to/from, use pnorm for computing rotation matrix.
1.47 Don't rotate orientation of mo magnitude very low.
1.43 Use precomputed two_r_sq to rule out contact.
1.41 A few pre-computed constants.
1.38 No verification.
1.36 For rolling friction add mo only after looking at both balls.
(1.24 -.18 No rolling friction.)
(1.27 -.09 Don't recompute orientation matrix.)
1.30 Don't sort by bogus contact time.
(1.35 sort contact list twice.)
1.29 Make region length two_r, don't initialize unused members.
(1.08 Ball render: 0.42;  Only render very other ball.)
1.20 Use single triangle strip for ball.
1.17 Use 3x3 matrix multiply.
(1.04 No rolling friction: 0.13.)
(0.87 No torque of any kind: 0.30 )
1.20 Occlusion queries.

1.69 320 time steps / s. => 0.52 per time steps, 0.65 per render.

Torq   Rend   ????
0.36 + 0.33 + 0.48

::  4 October 2009, 14:27:53 CDT

Balls now have angular momentum.
A drip mode for watching balls accumulate in a sheet.
Use occlusion test to avoid rendering hidden balls.
Many other improvements.

:: 11 October 2009,  8:56:39 CDT

cuda-util.h
Added header.
Include cuda_runtime.h and cuda_gl_interop.h
pCUDA_Memory: 
 Deallocate cuda memory when destructor called.
 New: ptrs_to_cuda_side, ptrs_to_cuda
 Initialize locked.
pCUDA_Memory_X: Use pCUDA_Memory::ptrs_to_cuda_side.

:: 13 October 2009, 18:03:25 CDT


xf 7  cu 16.8  cpu 100.8  
xf 7  cu 16.8  cpu  99.0  Increase sm storage from 1000 to 16000.
xf x  cu  9.3  cpu  47.7  Turn on optimization.
xf 1  cu ----  cpu   6.8  Turn off cuda.
xf 3  cu  7.4  cpu  36.7  Don't reallocate cuda buffers each time step.
xf 1  cu  2.5  cpu   6.8  Update schedule every (3) time steps.
xf 1  cu  2.3  cpu   5.2  Update schedule every (10) time steps.
xf 1  cu  1.8  cpu   4.9  Only send data to cuda when stale.
xf 1  cu  1.5  cpu   4.5  Only retrieve all cuda data when ready to render.
xf 1  cu  1.2  cpu   4.2  Base interaction region on max ball speed.

:: 26 October 2009, 12:59:34 CDT

Solve[ (m2 - m2 m1 ) u^4 + ( 2 m1 - 2 m1^2 + 2 e^2 + 2 m2^2 ) u^3 + 6 u^2 m2 m1 + ( -2 m2^2 + 2 m1^2 + 2 m1 - 2 e^2 ) u - m2 m1 - m2 == 0,u]

:: 29 October 2009, 18:20:36 CDT

Check in shader changes.
Move quats to coor.

:: 30 October 2009, 18:07:52 CDT

To Do:

Update comments on render routine.
Finish comments on time-step CPU
Document physics variables.
Finish organizing World structure.
Move out CUDA support code.
Separate occlusion test for reflections.

::  2 November 2009,  9:24:47 CST

Warmup...


Physics

Overview

 


Rendering

Code Organization

Shaders

::  3 November 2009, 14:21:42 CST

To Do:

Remove CUDA code.
>Document user modifiable variables.
>Make sure each file has comments header.

:: 12 November 2009, 18:15:41 CST

CUDA Tests

3.7 ms, 32 th / bl

2 p, 18 r, 39 bl

1.7 ms, 2 p, 18 r, 39 bl   32 th / bl  
  3.1 ms  6 / 84 r
1.1 ms, 2 p, 15 r, 21 bl   64 th / bl
  2.8 ms  4 / 73 r
1.0 ms, 1 p, 15 r, 11 bl  128 th / bl
  2.3 ms  3 / 58 r

Pop: 1.3
For 2877 tacts, 2 passes, 19 total rnds; Eff 0.3713  Max Bl 9  Eff 0.3526
DQ: 1.1
For 2848 tacts, 1 passes, 12 total rnds; Eff 0.3697  Max Bl 11  Eff 0.3497

Pop:
For 2825 tacts, 2 p, 17 tot rnds; Eff 0.3748  Max Bl 10/12/94  Eff 0.3626
DQ:
For 2847 tacts, 1 p, 11 tot rnds; Eff 0.3705  Max Bl 11/12/81  Eff 0.3496

Skip
 For 2844 tacts, 1 p, 12 tot rnds; Max Bl 11/12/82 W 8112/4688  Eff 0.3506
Don't skip
 For 2870 tacts, 2 p, 15 tot rnds; Max Bl 10/13/74 W 7296/4155  Eff 0.3934

md 0  For 2838 tacts, 1 p, 13 tot rnds; Max Bl 11/12/93 W 8384/4655  Eff 0.3385
md 1  For 2878 tacts, 1 p, 11 tot rnds; Max Bl 11/12/81 W 8064/4647  Eff 0.3569
md 5  For 2818 tacts, 1 p, 11 tot rnds; Max Bl 11/12/81 W 7712/4530  Eff 0.3654
md 50 For 2856 tacts, 1 p, 11 tot rnds; Max Bl 11/12/81 W 7888/4587  Eff 0.3621

:: 16 November 2009, 10:52:43 CST

Sparse:

1.04  For 2941 tacts, 1 p, 12 tot rnds; Max Bl 11/12/82 W 7952/4770  Eff 0.3698

Dense:
1.35  For 3022 tacts, 1 p, 11 tot rnds; Max Bl 11/12/81 W 3552/4920  Eff 0.8508


.75  Sparse, Ball_W not pot
.65  Dense, Ball_W not pot

method=[ memcpyHtoD ] gputime=[ 4.704 ] cputime=[ 1.000 ] memTransferSize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.936 ] cputime=[ 1.000 ] memTransferSize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 9.344 ] cputime=[ 2.000 ] memTransferSize=[ 13312 ] 
method=[ memcpyHtoD ] gputime=[ 26.400 ] cputime=[ 6.000 ] memTransferSize=[ 54272 ] 
method=[ _Z10pass_pairsiiii ] gputime=[ 81.152 ] cputime=[ 100.000 ] occupancy=[ 0.125 ] divergent_branch=[ 22 ] instructions=[ 5625 ] warp_serialize=[ 4029 ] 
method=[ _Z10pass_pairsiiii ] gputime=[ 53.504 ] cputime=[ 67.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] warp_serialize=[ 0 ] 
method=[ _Z14pass_somethingii ] gputime=[ 28.128 ] cputime=[ 38.000 ] occupancy=[ 0.375 ] divergent_branch=[ 0 ] instructions=[ 0 ] warp_serialize=[ 0 ] 
method=[ _Z10pass_pairsiiii ] gputime=[ 79.744 ] cputime=[ 90.000 ] occupancy=[ 0.125 ] divergent_branch=[ 22 ] instructions=[ 5627 ] warp_serialize=[ 4065 ] 
method=[ _Z10pass_pairsiiii ] gputime=[ 53.696 ] cputime=[ 63.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] warp_serialize=[ 0 ] 
method=[ _Z14pass_somethingii ] gputime=[ 27.264 ] cputime=[ 37.000 ] occupancy=[ 0.375 ] divergent_branch=[ 0 ] instructions=[ 0 ] warp_serialize=[ 0 ] 
method=[ _Z10pass_pairsiiii ] gputime=[ 80.224 ] cputime=[ 90.000 ] occupancy=[ 0.125 ] divergent_branch=[ 22 ] instructions=[ 5621 ] warp_serialize=[ 4028 ] 
method=[ _Z10pass_pairsiiii ] gputime=[ 53.568 ] cputime=[ 63.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] warp_serialize=[ 0 ] 
method=[ _Z14pass_somethingii ] gputime=[ 28.032 ] cputime=[ 37.000 ] occupancy=[ 0.375 ] divergent_branch=[ 0 ] instructions=[ 0 ] warp_serialize=[ 0 ] 
method=[ _Z10pass_pairsiiii ] gputime=[ 79.936 ] cputime=[ 90.000 ] occupancy=[ 0.125 ] divergent_branch=[ 22 ] instructions=[ 5627 ] warp_serialize=[ 4075 ] 
method=[ _Z10pass_pairsiiii ] gputime=[ 53.888 ] cputime=[ 63.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] warp_serialize=[ 0 ] 
method=[ _Z14pass_somethingii ] gputime=[ 27.744 ] cputime=[ 37.000 ] occupancy=[ 0.375 ] divergent_branch=[ 0 ] instructions=[ 0 ] warp_serialize=[ 0 ] 
method=[ memcpyDtoH ] gputime=[ 41.952 ] cputime=[ 75.000 ] memTransferSize=[ 128256 ] 


char[12]: warp_serialize [ 2384 ]

ws [ 3814 ]:  floats after 3-elt vectors.

Make counts shorts, no padding.
method=[ _Z10pass_pairsiiii ] gputime=[ 89.696 ] cputime=[ 99.000 ] occupancy=[ 0.125 ] divergent_branch=[ 26 ] instructions=[ 6493 ] warp_serialize=[ 5472 ] 

method=[ _Z10pass_pairsiiii ] gputime=[ 105.728 ] cputime=[ 115.000 ] occupancy=[ 0.125 ] divergent_branch=[ 23 ] instructions=[ 6124 ] warp_serialize=[ 12054 ] 
pad 16
method=[ _Z10pass_pairsiiii ] gputime=[ 75.008 ] cputime=[ 88.000 ] occupancy=[ 0.125 ] divergent_branch=[ 23 ] instructions=[ 5645 ] warp_serialize=[ 2826 ] 

short counts and m_idx, struct size 56 without pad.

pad 0
method=[ _Z10pass_pairsiiii ] gputime=[ 87.264 ] cputime=[ 97.000 ] occupancy=[ 0.125 ] divergent_branch=[ 15 ] instructions=[ 4933 ] warp_serialize=[ 11638 ] 

pad 1
method=[ _Z10pass_pairsiiii ] gputime=[ 77.216 ] cputime=[ 87.000 ] occupancy=[ 0.125 ] divergent_branch=[ 19 ] instructions=[ 4945 ] warp_serialize=[ 5322 ] 

pad 4
method=[ _Z10pass_pairsiiii ] gputime=[ 77.984 ] cputime=[ 88.000 ] occupancy=[ 0.125 ] divergent_branch=[ 19 ] instructions=[ 4937 ] warp_serialize=[ 6061 ] 

pad 8
method=[ _Z10pass_pairsiiii ] gputime=[ 205.248 ] cputime=[ 215.000 ] occupancy=[ 0.125 ] divergent_branch=[ 23 ] instructions=[ 5936 ] warp_serialize=[ 62087 ] 

pad 12
method=[ _Z10pass_pairsiiii ] gputime=[ 74.496 ] cputime=[ 85.000 ] occupancy=[ 0.125 ] divergent_branch=[ 16 ] instructions=[ 4842 ] warp_serialize=[ 4782 ] 


Looking again at time to compute schedule:

Every 10:
 0.81   4.5
Every time:
 1.30  20.2
Pause:
 -----  2.4

About 17.4 ms CPU for schedule.
Paused:
 2.4 ms cpu
Simulating: 4.5 - 2.4 = 2.1 for physics, including schedule.

:: 18 November 2009, 14:50:02 CST


 0.76  5.7 Use separate thread to compute schedule, compute every frame.
 0.74  4.6 Compute at frame end if would go stale before end of next frame.

:: 19 November 2009, 17:58:00 CST

Check in include directory changes.
Update keyboard commands.
Update variables.
Make sure balloon code still compiles.

:: 20 November 2009, 16:39:27 CST


 0.69 4.3 Make vec3 cuda_balls members to vec4. Fix b1_placed bug.

:: 20 November 2009, 18:13:42 CST

Checkin for cuda-util.h

New: TO_DEV_DS, etc.
New: CMX_SETUP
New: vec_set, etc.
pCUDA_Memory, pCUDA_Memory_X:
  Will now free memory on destruct.
  New: realloc: Can now change size.
  SOA turned off by default, and probably bitrotted.
  Now allocate device memory just before needed rather than when alloc
   called.


Some more tuning of CUDA schedule.
Optionally color ball based on block placement.
Avoid cuda errors by using maximum number of threads for cuda routines.
Show block size info at top of frame.

::  9 December 2009, 15:59:21 CST

 0.496  3.58
 0.493  3.58 Remove local memory accesses.

::  7 April 2010, 13:44:13 CDT

method=[ _Z10pass_pairsiiiii ] gputime=[ 242.304 ] cputime=[ 257.000 ] occupancy=[ 0.125 ] divergent_branch=[ 49 ] instructions=[ 11612 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 88.800 ] cputime=[ 101.000 ] occupancy=[ 0.125 ] divergent_branch=[ 9 ] instructions=[ 2058 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.792 ] cputime=[ 50.000 ] occupancy=[ 0.500 ] divergent_branch=[ 13 ] instructions=[ 1873 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z13pass_platformi ] gputime=[ 302.624 ] cputime=[ 316.000 ] occupancy=[ 0.250 ] divergent_branch=[ 101 ] instructions=[ 15598 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ memcpyDtoH ] gputime=[ 4.224 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.376 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.904 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 247.712 ] cputime=[ 262.000 ] occupancy=[ 0.125 ] divergent_branch=[ 76 ] instructions=[ 18096 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 88.160 ] cputime=[ 99.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 38.240 ] cputime=[ 50.000 ] occupancy=[ 0.500 ] divergent_branch=[ 14 ] instructions=[ 1965 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z13pass_platformi ] gputime=[ 300.480 ] cputime=[ 314.000 ] occupancy=[ 0.250 ] divergent_branch=[ 152 ] instructions=[ 19136 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ memcpyDtoH ] gputime=[ 4.160 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.376 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.968 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.616 ] cputime=[ 0.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 246.848 ] cputime=[ 261.000 ] occupancy=[ 0.125 ] divergent_branch=[ 63 ] instructions=[ 14126 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 88.352 ] cputime=[ 100.000 ] occupancy=[ 0.125 ] divergent_branch=[ 16 ] instructions=[ 3217 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 38.336 ] cputime=[ 51.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 304.832 ] cputime=[ 319.000 ] occupancy=[ 0.250 ] divergent_branch=[ 341 ] instructions=[ 35623 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.224 ] cputime=[ 14.000 ] memtransfersize=[ 136 ] 
method=[ memcpyDtoH ] gputime=[ 290.944 ] cputime=[ 469.000 ] memtransfersize=[ 960512 ] 
method=[ memcpyHtoD ] gputime=[ 4.032 ] cputime=[ 7.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 31.200 ] cputime=[ 55.000 ] memtransfersize=[ 82432 ] 
method=[ memcpyHtoD ] gputime=[ 3.584 ] cputime=[ 2.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 74.464 ] cputime=[ 589.000 ] memtransfersize=[ 1266688 ] 
method=[ memcpyHtoD ] gputime=[ 5.376 ] cputime=[ 2.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 4.000 ] cputime=[ 0.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 4.000 ] cputime=[ 0.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 246.592 ] cputime=[ 258.000 ] occupancy=[ 0.125 ] divergent_branch=[ 39 ] instructions=[ 9053 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 90.176 ] cputime=[ 101.000 ] occupancy=[ 0.125 ] divergent_branch=[ 19 ] instructions=[ 3446 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.440 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 303.808 ] cputime=[ 318.000 ] occupancy=[ 0.250 ] divergent_branch=[ 191 ] instructions=[ 30854 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.128 ] cputime=[ 14.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.344 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 4.000 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 0.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 246.784 ] cputime=[ 261.000 ] occupancy=[ 0.125 ] divergent_branch=[ 79 ] instructions=[ 18720 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 90.272 ] cputime=[ 102.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 38.144 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 10 ] instructions=[ 1590 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 304.224 ] cputime=[ 318.000 ] occupancy=[ 0.250 ] divergent_branch=[ 159 ] instructions=[ 20484 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.288 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.344 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 246.048 ] cputime=[ 260.000 ] occupancy=[ 0.125 ] divergent_branch=[ 77 ] instructions=[ 18377 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 90.272 ] cputime=[ 102.000 ] occupancy=[ 0.125 ] divergent_branch=[ 20 ] instructions=[ 3616 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.504 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 304.096 ] cputime=[ 316.000 ] occupancy=[ 0.250 ] divergent_branch=[ 349 ] instructions=[ 36431 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.128 ] cputime=[ 15.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.312 ] cputime=[ 2.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.936 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.936 ] cputime=[ 0.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 250.848 ] cputime=[ 265.000 ] occupancy=[ 0.125 ] divergent_branch=[ 39 ] instructions=[ 9299 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 90.144 ] cputime=[ 102.000 ] occupancy=[ 0.125 ] divergent_branch=[ 19 ] instructions=[ 3446 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.472 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 305.376 ] cputime=[ 316.000 ] occupancy=[ 0.250 ] divergent_branch=[ 191 ] instructions=[ 30867 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.320 ] cputime=[ 12.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.344 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 4.032 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.616 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 248.800 ] cputime=[ 267.000 ] occupancy=[ 0.125 ] divergent_branch=[ 79 ] instructions=[ 18719 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 90.112 ] cputime=[ 102.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.344 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 10 ] instructions=[ 1590 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 305.408 ] cputime=[ 317.000 ] occupancy=[ 0.250 ] divergent_branch=[ 158 ] instructions=[ 20618 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.160 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.376 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.936 ] cputime=[ 0.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 250.400 ] cputime=[ 268.000 ] occupancy=[ 0.125 ] divergent_branch=[ 78 ] instructions=[ 18384 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 89.920 ] cputime=[ 101.000 ] occupancy=[ 0.125 ] divergent_branch=[ 20 ] instructions=[ 3616 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.792 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 305.216 ] cputime=[ 317.000 ] occupancy=[ 0.250 ] divergent_branch=[ 354 ] instructions=[ 36769 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.256 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.344 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 4.032 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 248.576 ] cputime=[ 266.000 ] occupancy=[ 0.125 ] divergent_branch=[ 39 ] instructions=[ 9051 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 89.888 ] cputime=[ 102.000 ] occupancy=[ 0.125 ] divergent_branch=[ 19 ] instructions=[ 3450 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.344 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 305.824 ] cputime=[ 317.000 ] occupancy=[ 0.250 ] divergent_branch=[ 191 ] instructions=[ 30857 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.160 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyDtoH ] gputime=[ 290.880 ] cputime=[ 485.000 ] memtransfersize=[ 960512 ] 
method=[ memcpyHtoD ] gputime=[ 4.000 ] cputime=[ 5.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 30.880 ] cputime=[ 57.000 ] memtransfersize=[ 82432 ] 
method=[ memcpyHtoD ] gputime=[ 3.936 ] cputime=[ 2.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 74.592 ] cputime=[ 591.000 ] memtransfersize=[ 1266688 ] 
method=[ memcpyHtoD ] gputime=[ 5.376 ] cputime=[ 2.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.904 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 4.096 ] cputime=[ 0.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 237.472 ] cputime=[ 254.000 ] occupancy=[ 0.125 ] divergent_branch=[ 79 ] instructions=[ 18763 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 96.352 ] cputime=[ 108.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 43.072 ] cputime=[ 55.000 ] occupancy=[ 0.500 ] divergent_branch=[ 12 ] instructions=[ 1940 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 305.344 ] cputime=[ 316.000 ] occupancy=[ 0.250 ] divergent_branch=[ 98 ] instructions=[ 15521 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ memcpyDtoH ] gputime=[ 4.256 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.312 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 4.032 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 240.992 ] cputime=[ 258.000 ] occupancy=[ 0.125 ] divergent_branch=[ 80 ] instructions=[ 19008 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 95.040 ] cputime=[ 107.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_inco


Pairs time (before tuning)

(+ 237 96 43 ) = 376.0000 

method=[ _Z13pass_platformi ] gputime=[ 61.856 ] cputime=[ 74.000 ] occupancy=[ 0.344 ] divergent_branch=[ 11 ] instructions=[ 4064 ] gld_incoherent=[ 0 ] gst_incoherent=[ 4 ] 

Check for tile collision, but don't resolve.

method=[ _Z13pass_platformi ] gputime=[ 283.840 ] cputime=[ 296.000 ] occupancy=[ 0.250 ] divergent_branch=[ 160 ] instructions=[ 17002 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 

Prepare a work list.

method=[ _Z13pass_platformi ] gputime=[ 339.104 ] cputime=[ 350.000 ] occupancy=[ 0.250 ] divergent_branch=[ 236 ] instructions=[ 30465 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 

Treat tiles like balls, test & resolve in pairs pass:

Plat: 68
Pairs: (+ 390 278 158) = 826.0000 

No tiles: (+ 285 100 46) = 431.0000 


Tried:
 Assign work to warps based on code path. (Small improvement.)
 Allow multiple uses of read-only tiles. (Small improvement, but needs more work.)

Make steps narrower to help with scheduling.

Plat: 59
Pairs: (+ 299 101 47) = 447.0000 

Get rid of local variable access.

Plat: 56.9
Pairs: (+ 311 103 41 ) = 455.0000 

Sort Prefetch

Plat: 61
Pairs (+ 259 97 36) = 392.0000 

On laptop:

Plat: 404
Pairs: (+ 2703 583 134) = 3420.0000 

method=[ _Z10pass_pairsiiiii ] gputime=[ 2703.744 ] cputime=[ 2716.000 ] occupancy=[ 0.167 ] instructions=[ 91980 ] gld_incoherent=[ 25422 ] gld_coherent=[ 3327 ] gst_incoherent=[ 25400 ] 

Balls: 8600
(* 8600 4 3) = 103200.0000 
(* 25000 2) = 50000.0000 
(*  4 128 2209) = 1131008.0000 


method=[ _Z10pass_pairsiiiii ] gputime=[ 2654.592 ] cputime=[ 2673.000 ] occupancy=[ 0.167 ] instructions=[ 82855 ] gld_incoherent=[ 24828 ] gld_coherent=[ 3278 ] gst_incoherent=[ 24828 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 576.704 ] cputime=[ 592.000 ] occupancy=[ 0.167 ] instructions=[ 16146 ] gld_incoherent=[ 7848 ] gld_coherent=[ 609 ] gst_incoherent=[ 7848 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 143.936 ] cputime=[ 157.000 ] occupancy=[ 0.167 ] instructions=[ 4023 ] gld_incoherent=[ 714 ] gld_coherent=[ 216 ] gst_incoherent=[ 714 ] 
method=[ _Z13pass_platformi ] gputime=[ 393.056 ] cputime=[ 406.000 ] occupancy=[ 0.250 ] instructions=[ 18247 ] gld_incoherent=[ 4224 ] gld_coherent=[ 3168 ] gst_incoherent=[ 0 ] 

method=[ _Z10pass_pairsiiiii ] gputime=[ 2738.304 ] cputime=[ 2757.000 ] occupancy=[ 0.167 ] gld_incoherent=[ 24558 ] gld_coherent=[ 3842 ] gst_incoherent=[ 24558 ] warp_serialize=[ 93036 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 726.304 ] cputime=[ 741.000 ] occupancy=[ 0.167 ] gld_incoherent=[ 8118 ] gld_coherent=[ 888 ] gst_incoherent=[ 8118 ] warp_serialize=[ 8911 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 136.704 ] cputime=[ 149.000 ] occupancy=[ 0.167 ] gld_incoherent=[ 558 ] gld_coherent=[ 153 ] gst_incoherent=[ 558 ] warp_serialize=[ 130 ] 
method=[ _Z13pass_platformi ] gputime=[ 384.000 ] cputime=[ 396.000 ] occupancy=[ 0.250 ] gld_incoherent=[ 4224 ] gld_coherent=[ 3168 ] gst_incoherent=[ 0 ] warp_serialize=[ 0 ] 

::  7 April 2010, 13:44:13 CDT

method=[ _Z10pass_pairsiiiii ] gputime=[ 242.304 ] cputime=[ 257.000 ] occupancy=[ 0.125 ] divergent_branch=[ 49 ] instructions=[ 11612 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 88.800 ] cputime=[ 101.000 ] occupancy=[ 0.125 ] divergent_branch=[ 9 ] instructions=[ 2058 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.792 ] cputime=[ 50.000 ] occupancy=[ 0.500 ] divergent_branch=[ 13 ] instructions=[ 1873 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z13pass_platformi ] gputime=[ 302.624 ] cputime=[ 316.000 ] occupancy=[ 0.250 ] divergent_branch=[ 101 ] instructions=[ 15598 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ memcpyDtoH ] gputime=[ 4.224 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.376 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.904 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 247.712 ] cputime=[ 262.000 ] occupancy=[ 0.125 ] divergent_branch=[ 76 ] instructions=[ 18096 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 88.160 ] cputime=[ 99.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 38.240 ] cputime=[ 50.000 ] occupancy=[ 0.500 ] divergent_branch=[ 14 ] instructions=[ 1965 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z13pass_platformi ] gputime=[ 300.480 ] cputime=[ 314.000 ] occupancy=[ 0.250 ] divergent_branch=[ 152 ] instructions=[ 19136 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ memcpyDtoH ] gputime=[ 4.160 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.376 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.968 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.616 ] cputime=[ 0.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 246.848 ] cputime=[ 261.000 ] occupancy=[ 0.125 ] divergent_branch=[ 63 ] instructions=[ 14126 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 88.352 ] cputime=[ 100.000 ] occupancy=[ 0.125 ] divergent_branch=[ 16 ] instructions=[ 3217 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 38.336 ] cputime=[ 51.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 304.832 ] cputime=[ 319.000 ] occupancy=[ 0.250 ] divergent_branch=[ 341 ] instructions=[ 35623 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.224 ] cputime=[ 14.000 ] memtransfersize=[ 136 ] 
method=[ memcpyDtoH ] gputime=[ 290.944 ] cputime=[ 469.000 ] memtransfersize=[ 960512 ] 
method=[ memcpyHtoD ] gputime=[ 4.032 ] cputime=[ 7.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 31.200 ] cputime=[ 55.000 ] memtransfersize=[ 82432 ] 
method=[ memcpyHtoD ] gputime=[ 3.584 ] cputime=[ 2.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 74.464 ] cputime=[ 589.000 ] memtransfersize=[ 1266688 ] 
method=[ memcpyHtoD ] gputime=[ 5.376 ] cputime=[ 2.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 4.000 ] cputime=[ 0.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 4.000 ] cputime=[ 0.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 246.592 ] cputime=[ 258.000 ] occupancy=[ 0.125 ] divergent_branch=[ 39 ] instructions=[ 9053 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 90.176 ] cputime=[ 101.000 ] occupancy=[ 0.125 ] divergent_branch=[ 19 ] instructions=[ 3446 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.440 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 303.808 ] cputime=[ 318.000 ] occupancy=[ 0.250 ] divergent_branch=[ 191 ] instructions=[ 30854 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.128 ] cputime=[ 14.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.344 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 4.000 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 0.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 246.784 ] cputime=[ 261.000 ] occupancy=[ 0.125 ] divergent_branch=[ 79 ] instructions=[ 18720 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 90.272 ] cputime=[ 102.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 38.144 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 10 ] instructions=[ 1590 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 304.224 ] cputime=[ 318.000 ] occupancy=[ 0.250 ] divergent_branch=[ 159 ] instructions=[ 20484 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.288 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.344 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 246.048 ] cputime=[ 260.000 ] occupancy=[ 0.125 ] divergent_branch=[ 77 ] instructions=[ 18377 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 90.272 ] cputime=[ 102.000 ] occupancy=[ 0.125 ] divergent_branch=[ 20 ] instructions=[ 3616 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.504 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 304.096 ] cputime=[ 316.000 ] occupancy=[ 0.250 ] divergent_branch=[ 349 ] instructions=[ 36431 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.128 ] cputime=[ 15.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.312 ] cputime=[ 2.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.936 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.936 ] cputime=[ 0.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 250.848 ] cputime=[ 265.000 ] occupancy=[ 0.125 ] divergent_branch=[ 39 ] instructions=[ 9299 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 90.144 ] cputime=[ 102.000 ] occupancy=[ 0.125 ] divergent_branch=[ 19 ] instructions=[ 3446 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.472 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 305.376 ] cputime=[ 316.000 ] occupancy=[ 0.250 ] divergent_branch=[ 191 ] instructions=[ 30867 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.320 ] cputime=[ 12.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.344 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 4.032 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.616 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 248.800 ] cputime=[ 267.000 ] occupancy=[ 0.125 ] divergent_branch=[ 79 ] instructions=[ 18719 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 90.112 ] cputime=[ 102.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.344 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 10 ] instructions=[ 1590 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 305.408 ] cputime=[ 317.000 ] occupancy=[ 0.250 ] divergent_branch=[ 158 ] instructions=[ 20618 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.160 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.376 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.936 ] cputime=[ 0.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 250.400 ] cputime=[ 268.000 ] occupancy=[ 0.125 ] divergent_branch=[ 78 ] instructions=[ 18384 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 89.920 ] cputime=[ 101.000 ] occupancy=[ 0.125 ] divergent_branch=[ 20 ] instructions=[ 3616 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.792 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 305.216 ] cputime=[ 317.000 ] occupancy=[ 0.250 ] divergent_branch=[ 354 ] instructions=[ 36769 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.256 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.344 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 4.032 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 248.576 ] cputime=[ 266.000 ] occupancy=[ 0.125 ] divergent_branch=[ 39 ] instructions=[ 9051 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 89.888 ] cputime=[ 102.000 ] occupancy=[ 0.125 ] divergent_branch=[ 19 ] instructions=[ 3450 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 37.344 ] cputime=[ 49.000 ] occupancy=[ 0.500 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 305.824 ] cputime=[ 317.000 ] occupancy=[ 0.250 ] divergent_branch=[ 191 ] instructions=[ 30857 ] gld_incoherent=[ 0 ] gst_incoherent=[ 6 ] 
method=[ memcpyDtoH ] gputime=[ 4.160 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyDtoH ] gputime=[ 290.880 ] cputime=[ 485.000 ] memtransfersize=[ 960512 ] 
method=[ memcpyHtoD ] gputime=[ 4.000 ] cputime=[ 5.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 30.880 ] cputime=[ 57.000 ] memtransfersize=[ 82432 ] 
method=[ memcpyHtoD ] gputime=[ 3.936 ] cputime=[ 2.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 74.592 ] cputime=[ 591.000 ] memtransfersize=[ 1266688 ] 
method=[ memcpyHtoD ] gputime=[ 5.376 ] cputime=[ 2.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 3.904 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 4.096 ] cputime=[ 0.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 237.472 ] cputime=[ 254.000 ] occupancy=[ 0.125 ] divergent_branch=[ 79 ] instructions=[ 18763 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 96.352 ] cputime=[ 108.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 43.072 ] cputime=[ 55.000 ] occupancy=[ 0.500 ] divergent_branch=[ 12 ] instructions=[ 1940 ] gld_incoherent=[ 0 ] gst_incoherent=[ 3 ] 
method=[ _Z13pass_platformi ] gputime=[ 305.344 ] cputime=[ 316.000 ] occupancy=[ 0.250 ] divergent_branch=[ 98 ] instructions=[ 15521 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 
method=[ memcpyDtoH ] gputime=[ 4.256 ] cputime=[ 13.000 ] memtransfersize=[ 136 ] 
method=[ memcpyHtoD ] gputime=[ 5.312 ] cputime=[ 1.000 ] memtransfersize=[ 4320 ] 
method=[ memcpyHtoD ] gputime=[ 4.032 ] cputime=[ 1.000 ] memtransfersize=[ 8 ] 
method=[ memcpyHtoD ] gputime=[ 3.552 ] cputime=[ 1.000 ] memtransfersize=[ 4 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 240.992 ] cputime=[ 258.000 ] occupancy=[ 0.125 ] divergent_branch=[ 80 ] instructions=[ 19008 ] gld_incoherent=[ 0 ] gst_incoherent=[ 11 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 95.040 ] cputime=[ 107.000 ] occupancy=[ 0.125 ] divergent_branch=[ 0 ] instructions=[ 0 ] gld_incoherent=[ 0 ] gst_inco


Pairs time (before tuning)

(+ 237 96 43 ) = 376.0000 

method=[ _Z13pass_platformi ] gputime=[ 61.856 ] cputime=[ 74.000 ] occupancy=[ 0.344 ] divergent_branch=[ 11 ] instructions=[ 4064 ] gld_incoherent=[ 0 ] gst_incoherent=[ 4 ] 

Check for tile collision, but don't resolve.

method=[ _Z13pass_platformi ] gputime=[ 283.840 ] cputime=[ 296.000 ] occupancy=[ 0.250 ] divergent_branch=[ 160 ] instructions=[ 17002 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 

Prepare a work list.

method=[ _Z13pass_platformi ] gputime=[ 339.104 ] cputime=[ 350.000 ] occupancy=[ 0.250 ] divergent_branch=[ 236 ] instructions=[ 30465 ] gld_incoherent=[ 0 ] gst_incoherent=[ 5 ] 

Treat tiles like balls, test & resolve in pairs pass:

Plat: 68
Pairs: (+ 390 278 158) = 826.0000 

No tiles: (+ 285 100 46) = 431.0000 


Tried:
 Assign work to warps based on code path. (Small improvement.)
 Allow multiple uses of read-only tiles. (Small improvement, but needs more work.)

Make steps narrower to help with scheduling.

Plat: 59
Pairs: (+ 299 101 47) = 447.0000 

Get rid of local variable access.

Plat: 56.9
Pairs: (+ 311 103 41 ) = 455.0000 

Sort Prefetch

Plat: 61
Pairs (+ 259 97 36) = 392.0000 

On laptop:

Plat: 404
Pairs: (+ 2703 583 134) = 3420.0000 

method=[ _Z10pass_pairsiiiii ] gputime=[ 2703.744 ] cputime=[ 2716.000 ] occupancy=[ 0.167 ] instructions=[ 91980 ] gld_incoherent=[ 25422 ] gld_coherent=[ 3327 ] gst_incoherent=[ 25400 ] 

Balls: 8600
(* 8600 4 3) = 103200.0000 
(* 25000 2) = 50000.0000 
(*  4 128 2209) = 1131008.0000 


method=[ _Z10pass_pairsiiiii ] gputime=[ 2654.592 ] cputime=[ 2673.000 ] occupancy=[ 0.167 ] instructions=[ 82855 ] gld_incoherent=[ 24828 ] gld_coherent=[ 3278 ] gst_incoherent=[ 24828 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 576.704 ] cputime=[ 592.000 ] occupancy=[ 0.167 ] instructions=[ 16146 ] gld_incoherent=[ 7848 ] gld_coherent=[ 609 ] gst_incoherent=[ 7848 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 143.936 ] cputime=[ 157.000 ] occupancy=[ 0.167 ] instructions=[ 4023 ] gld_incoherent=[ 714 ] gld_coherent=[ 216 ] gst_incoherent=[ 714 ] 
method=[ _Z13pass_platformi ] gputime=[ 393.056 ] cputime=[ 406.000 ] occupancy=[ 0.250 ] instructions=[ 18247 ] gld_incoherent=[ 4224 ] gld_coherent=[ 3168 ] gst_incoherent=[ 0 ] 

method=[ _Z10pass_pairsiiiii ] gputime=[ 2738.304 ] cputime=[ 2757.000 ] occupancy=[ 0.167 ] gld_incoherent=[ 24558 ] gld_coherent=[ 3842 ] gst_incoherent=[ 24558 ] warp_serialize=[ 93036 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 726.304 ] cputime=[ 741.000 ] occupancy=[ 0.167 ] gld_incoherent=[ 8118 ] gld_coherent=[ 888 ] gst_incoherent=[ 8118 ] warp_serialize=[ 8911 ] 
method=[ _Z10pass_pairsiiiii ] gputime=[ 136.704 ] cputime=[ 149.000 ] occupancy=[ 0.167 ] gld_incoherent=[ 558 ] gld_coherent=[ 153 ] gst_incoherent=[ 558 ] warp_serialize=[ 130 ] 
method=[ _Z13pass_platformi ] gputime=[ 384.000 ] cputime=[ 396.000 ] occupancy=[ 0.250 ] gld_incoherent=[ 4224 ] gld_coherent=[ 3168 ] gst_incoherent=[ 0 ] warp_serialize=[ 0 ] 


Back to orion:

Reduce number of shared memory accesses:

Plat: 56
Pairs: (+ 217 75 39) = 331.0000 

:: 13 April 2010, 19:04:17 CDT

New base class Phys, with Ball and Tile derived from it.
Tile proximity testing uses same AABB code as balls.
CUDA block assignment starts allows "small" blocks to improve locality.
Wheel made out of tiles, replaces spinner.
Removed dead shadow code (using vertex shader).
Ball release in spray and drip modes now waits for empty space.
Lots of colors. Too many colors!
Not-well-tuned code to parallelize schedule computation on CPU.
Add tiles to CUDA, including staircase and wheel.
Tuned CUDA code:
 Avoid doubles, use insn for sin, cos.
 Minimize read and write of shared memory.

::  4 May 2010, 13:35:44 CDT

pass 2
idx9: 21, idx 41
idx1: ? idx 40

:: 29 July 2010, 12:07:23 CDT

Checkins:

GTX 480 Changes (see below)
Move wheel from drop to shower, make 10x heavier.
Change gravity to 20, because it looks better.
Change specular lighting to viewer-local, provide separate spec intensity.
Checked in code produces reflections that are too bright.

GTX 480: Always use some kind of vertex shader when rendering physs,
even if shader reproduces fixed functionality. This yielded better
performance on a GTX 480, perhaps because of poorly tuned fixed
functionality code.

generic_lighting:
 Change model to more closely match fixed func.
 Use new options variable, but ignore separate specular option.
 Placeholder for separate specular option.
vs_main_xform_only, vs_main_plain: new.

svn commit --file /home/faculty/koppel/teach/gpcom/gpup/play/msg
Sending        play/Log
Sending        play/demo-x-collide.cc
Sending        play/demo-x-shdr.cc
Transmitting file data ...
Committed revision 251.

:: 14 September 2010, 11:53:53 CDT

Bug Fixes:
 Fall hitting outside of platform would get sucked in.
 Shading of reflected items wrong (dark where should be bright).
 Balls and wheel strink (due to trig errors).
Performance:
 Base AABB on z+x instead of just z.
 Tweak time factor and schedule lifetime.
 Various
Functionality:
 Make drip ball sizes r^2, not r.
 Make ball elasticity r^2, not r.

demo-x-collide:
 Fix: ball hitting platform from outside should be sucked in.
 Various places: use drand48 instead of expression of random.
 Make time step factor 18 (was 6), and schedule_lifetime_steps 18 (was 12)
 Increase Ball_max_z by 2r (previously r).
 Base AABB position on z + x, not just z.
 Drip: Use rand^2 for size of ball.
       Increase consecutive balls of same color to 1 << 7 (from 1<<3).
 Added debug code for proximity check errors.
 cuda_data_to_cpu: Remove duplicated code for updating contact_count, etc.
 cuda_schedule:  Use define Static for adding/remove static storage qual.
 For vertex shader, set 0x8 bit in sun_vs_options, for ambient light.
demo-x-shdr:
 generic_lighting:
  Honor new ambient lighting option (previously always add ambient light).
  Previously: set front color to visible side color.
  Now: Not from geo shader: just compute visible side color.
       From geo shader: compute both sides, normal points to front.
       Controlled using option VSO_SIDE_BOTH.
 vs_main_reflect: Choose front or back color based on reflected point loc.
demo-x-kernel.cu:  
 Fix problem of shrinking balls and wheel due to un-normalized
  quaternians and trig errors.
 Make ball elasticity r^2 instead of r.
 Fix problem when ball collides with outside of platform (see above).
 Make AABB position z+x, not just z.
tiles.h
 Tile: Make AABB position z+x, not just z.
.gdbinit: Turn off MALLOC_CHECK due to possible false positives on MT code.
Makefile:
 Move -O3 to CFLAGS.

:: 10 November 2011, 18:37:42 CST

Optimizing boxes code.

Looking at CPU
Without opt flat:
20ms

4.3ms  With opt. need more towers.

77ms  Lots of towers.
62ms  Get rid of edge markers.
61ms  Some small changes, including not initing sects.

:: 11 November 2011, 15:30:37 CST

Add separate float and double dot products.
 Existing dot products now return float.
In several places use float functions such as sqrtf.
pMatrix::set_transpose3x3: New.
pMatrix::cv: New
mult_transpose_MV: New.
pVect::pVect(float *a): New
pVect::elt(int idx): New
pVect::mask(int idx): New
pVect::sign_mask(int idx): New
pVect::operator /
pVect:: fabs, min, max, sum

:: 15 November 2011, 14:26:55 CST

45 ms: Sort face pair by dot product.
41 ms: Sort faces by dot product.
39 ms: Return don't examine box 1 if a single face eliminates all b2's edges.
32 ms: Compute volumes as lines are found, rather than later.
23 ms: Add line when adding points to [face][face] array. 
       This speedup may have been due to compiler shyness caused
       by the code adding line segments to sl.


:: 15 November 2011, 17:51:18 CST

demo-x-collide.cc


Changes for Boxes.
New file boxes.h
Number keys now set up different scenes.
New scenes: tower, brick wall.

Phys:
 New: geometry_update, get_moment_of_inertia_inv, density, mass, mass_inv,
      position, velocity, orientation, omega, prev_velocity, prev_omega, etc.
Balls:
 Remove members that are now in Phys.
tiles.h:
Allow destructor to be called.

svn commit demo-x-collide.cc demo-x.cuh demo-x-shdr.cc tiles.h boxes.h --file /home/faculty/koppel/teach/gpcom/gpup/play/msg


:: 22 November 2011, 12:54:39 CST

Tuning boxes gpu code:

CPU Wall
11 ms

Five-block tower
19 ms  
15 ms: Remove return from edge loop.
 0.195 ms/r
6.5 ms:  Precompute edge lines in own loop, which compiler is able to unroll.
 0.167 ms/r

0.158: Don't sort faces.
0.237: Run box_box_intersect_2 twice. 0.237 - 0.158 = 0.079
0.150: sect_2: Use an array of live edges.
0.146: sect_2: Use live edge count as loop limit.
0.205: Run box_box_intersect_2 twice. 0.205 - 0.146 = 0.059  0.087 / 0.059

Weekend improvements.

0.048

Pairs
0.173 
0.183 Prefetch twice. : Prefetch 0.010
0.270 Boxes resolve twice. : Boxes resolve: 0.100
0.130 Align on 4 floats rather than 8.

:: 29 November 2011, 11:57:36 CST

Using structs:

ptxas info    : Function properties for _Z10pass_pairsiiiii11Force_Types
    0 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 56 registers, 56 bytes cmem[0], 264 bytes cmem[2], 28 bytes cmem[16]

Using float3s:

ptxas info    : Function properties for _Z10pass_pairsiiiii11Force_Types
    376 bytes stack frame, 280 bytes spill stores, 232 bytes spill loads
ptxas info    : Used 63 registers, 56 bytes cmem[0], 264 bytes cmem[2], 28 bytes cmem[16]

Using float3 and uchar4.
ptxas info    : Compiling entry function '_Z10pass_pairsiiiii11Force_Types' for 'sm_21'
ptxas info    : Function properties for _Z10pass_pairsiiiii11Force_Types
    304 bytes stack frame, 248 bytes spill stores, 200 bytes spill loads
ptxas info    : Used 63 registers, 1600+0 bytes smem, 56 bytes cmem[0], 264 bytes cmem[2], 28 bytes cmem[16]

Umm
ptxas info    : Compiling entry function '_Z10pass_pairsiiiii11Force_Types' for 'sm_21'
ptxas info    : Function properties for _Z10pass_pairsiiiii11Force_Types
    280 bytes stack frame, 184 bytes spill stores, 136 bytes spill loads
ptxas info    : Used 63 registers, 1600+0 bytes smem, 56 bytes cmem[0], 264 bytes cmem[2], 28 bytes cmem[16]


Pairs
0.160 ? Use float3s for ball data.
0.145 Use separate int array for pt_type, tic.
0.123 Only compute rot matrix for boxes near use.
0.130 The struct version.

Pairs for plates separated by balls.
1.000


ptxas info    : Compiling entry function '_Z10pass_pairsiiiii11Force_Types' for 'sm_21'
ptxas info    : Function properties for _Z10pass_pairsiiiii11Force_Types
    280 bytes stack frame, 192 bytes spill stores, 132 bytes spill loads
ptxas info    : Used 63 registers, 1200+0 bytes smem, 56 bytes cmem[0], 264 bytes cmem[2], 28 bytes cmem[16]

::  9 December 2011, 13:15:56 CST

Pairs
0.113 Minor changes, such as eliminating more doubles. Latest CUDA.
0.115 Compute rotation matrix twice. (I assume compiler is doing that.)
      Note: time has large margin of error.
:: 31 October 2012, 17:02:40 CDT

Check in code in preparation for creating a project base
directory.

Notes:
 demo-x-kernel.cu Works with and without USE_STRUCT defined.
 

Check in new textures:

Check in:

Makefile
.bt-mural.jpeg
.mult.png
.gpup.png

.demo-x-boxes.cu
.demo-x-collide.cc
.demo-x-kernel.cu
.demo-x-shdr.cc
.demo-x.cuh
.boxes.h
.tiles.h (unmodified)

Add GPU computation of box intersection.
Added textures to boxes.
Changes for CUDA 5.
Removed definition of ASSERTS, used only in emulation mode.
